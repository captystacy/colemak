<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/@KeyIndexDefined">True</s:Boolean>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Shortcut/@EntryValue">crud-controller</s:String>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Description/@EntryValue">Creates entity controller with writable CUD</s:String>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Text/@EntryValue">public class $Prices$Controller : WritableController&lt;$Price$ViewModel, $Price$, $Price$CreateViewModel, $Price$UpdateViewModel, PagedListQueryParams&gt;&#xD;
{&#xD;
    public $Prices$Controller(&#xD;
    IMapper mapper,
    IEntityManagerFactory entityManagerFactory,
    IUnitOfWork unitOfWork)&#xD;
        : base(entityManagerFactory, unitOfWork, mapper)&#xD;
    {&#xD;
    }&#xD;
}&#xD;
&#xD;
public class $Price$CreateViewModel: IViewModel&#xD;
{&#xD;
}&#xD;
&#xD;
public class $Price$UpdateViewModel: ViewModelBase&#xD;
{&#xD;
}&#xD;
&#xD;
public class $Price$ViewModel: ViewModelBase&#xD;
{&#xD;
}&#xD;
&#xD;
public class $Price$MapperConfiguration : MapperConfigurationBase&#xD;
{&#xD;
    public $Price$MapperConfiguration()&#xD;
    {&#xD;
        CreateMap&lt;$Price$, $Price$ViewModel&gt;()&#xD;
            .ForAllMembers(x=&gt;x.Ignore());&#xD;
&#xD;
        CreateMap&lt;$Price$CreateViewModel, $Price$&gt;()&#xD;
            .ForAllMembers(x=&gt;x.Ignore());&#xD;
&#xD;
        CreateMap&lt;$Price$UpdateViewModel, $Price$&gt;()&#xD;
            .ForAllMembers(x =&gt; x.Ignore());&#xD;
&#xD;
        CreateMap&lt;$Price$, $Price$UpdateViewModel&gt;()&#xD;
            .ForAllMembers(x=&gt;x.Ignore());&#xD;
&#xD;
        CreateMap&lt;IPagedList&lt;$Price$&gt;, IPagedList&lt;$Price$ViewModel&gt;&gt;()&#xD;
            .ConvertUsing&lt;PagedListConverter&lt;$Price$, $Price$ViewModel&gt;&gt;();&#xD;
    }    &#xD;
}&#xD;
&#xD;
public class $Price$Manager : EntityManager&lt;$Price$ViewModel, $Price$, $Price$CreateViewModel, $Price$UpdateViewModel&gt;&#xD;
{&#xD;
    public $Price$Manager(IMapper mapper,&#xD;
		IViewModelFactory&lt;$Price$CreateViewModel, $Price$UpdateViewModel&gt; viewModelFactory,&#xD;
		IEntityValidator&lt;$Price$&gt; validator)&#xD;
        : base(mapper, viewModelFactory, validator)&#xD;
    {&#xD;
    }&#xD;
}&#xD;
&#xD;
public class $Price$ViewModelFactory: ViewModelFactory&lt;$Price$CreateViewModel, $Price$UpdateViewModel&gt;&#xD;
{&#xD;
    private readonly IMapper _mapper;&#xD;
	private readonly IRepository&lt;$Price$&gt; _repository;&#xD;
&#xD;
    public $Price$ViewModelFactory(IMapper mapper, IUnitOfWork unitOfWork)&#xD;
    {&#xD;
        _mapper = mapper;&#xD;
		_repository = unitOfWork.GetRepository&lt;$Price$&gt;();&#xD;
    }&#xD;
&#xD;
    public override Task&lt;OperationResult&lt;$Price$CreateViewModel&gt;&gt; GenerateForCreateAsync()&#xD;
    {&#xD;
		var operation = OperationResult.CreateResult&lt;$Price$CreateViewModel&gt;();&#xD;
        operation.Result = new $Price$CreateViewModel();&#xD;
        return Task.FromResult(operation);&#xD;
    }&#xD;
&#xD;
    public override async Task&lt;OperationResult&lt;$Price$UpdateViewModel&gt;&gt; GenerateForUpdateAsync(Guid id)&#xD;
    {&#xD;
        var operation = OperationResult.CreateResult&lt;$Price$UpdateViewModel&gt;();&#xD;
        var entity = await _repository.GetFirstOrDefaultAsync(predicate: x =&gt; x.Id == id);&#xD;
        var mapped = _mapper.Map&lt;$Price$UpdateViewModel&gt;(entity);&#xD;
        operation.Result = mapped;&#xD;
        operation.AddSuccess("ViewModel generated for $Price$ entity. Please see Additional information in DataObject").AddData(new { Identifier = id });&#xD;
        return operation;&#xD;
    }&#xD;
}&#xD;
&#xD;
public class $Price$Validator: EntityValidator&lt;$Price$&gt;&#xD;
{&#xD;
}</s:String>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Reformat/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/ShortenQualifiedReferences/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Applicability/=Live/@EntryIndexedValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Scope/=C3001E7C0DA78E4487072B7E050D86C5/@KeyIndexDefined">True</s:Boolean>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Scope/=C3001E7C0DA78E4487072B7E050D86C5/Type/@EntryValue">InCSharpFile</s:String>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Scope/=C3001E7C0DA78E4487072B7E050D86C5/CustomProperties/=minimumLanguageVersion/@EntryIndexedValue">2.0</s:String>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Field/=Price/@KeyIndexDefined">True</s:Boolean>
	<s:Int64 x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Field/=Price/Order/@EntryValue">0</s:Int64>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Field/=Prices/@KeyIndexDefined">True</s:Boolean>
	<s:Int64 x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=59A18C15DF35704490B18E11C96CBF15/Field/=Prices/Order/@EntryValue">1</s:Int64></wpf:ResourceDictionary>