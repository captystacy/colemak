<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/@KeyIndexDefined">True</s:Boolean>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Shortcut/@EntryValue">crud</s:String>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Text/@EntryValue">public class $Entity$Endpoints : EndpointDefinition&#xD;
{&#xD;
    public override void ConfigureApplication(WebApplication app)&#xD;
    {&#xD;
        app.MapGet("/api/$entities$/{id}", Get$Entity$ById);&#xD;
        app.MapGet("/api/$entities$/paged", Get$Entity$Paged);&#xD;
        app.MapDelete("/api/$entities$/{id}", Delete$Entity$);&#xD;
        app.MapPost("/api/$entities$/", Post$Entity$);&#xD;
        app.MapPut("/api/$entities$/", Put$Entity$);&#xD;
    }&#xD;
&#xD;
    [ProducesResponseType(200)]&#xD;
    [ProducesResponseType(401)]&#xD;
    [Authorize(AuthenticationSchemes = AuthData.AuthSchemes)]&#xD;
    [FeatureGroupName("$Entities$")]&#xD;
    private async Task&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt; Get$Entity$ById([FromServices] IMediator mediator, Guid id, HttpContext context)&#xD;
        =&gt; await mediator.Send(new Get$Entity$ByIdRequest(id), context.RequestAborted);&#xD;
&#xD;
    [ProducesResponseType(200)]&#xD;
    [ProducesResponseType(401)]&#xD;
    [Authorize(AuthenticationSchemes = AuthData.AuthSchemes)]&#xD;
    [FeatureGroupName("$Entities$")]&#xD;
    private async Task&lt;OperationResult&lt;IPagedList&lt;$Entity$ViewModel&gt;&gt;&gt; Get$Entity$Paged([FromServices] IMediator mediator, int pageIndex, int pageSize, string? search, HttpContext context)&#xD;
        =&gt; await mediator.Send(new Get$Entity$PagedRequest(pageIndex, pageSize, search), context.RequestAborted);&#xD;
&#xD;
    [ProducesResponseType(200)]&#xD;
    [ProducesResponseType(401)]&#xD;
    [Authorize(AuthenticationSchemes = AuthData.AuthSchemes)]&#xD;
    [FeatureGroupName("$Entities$")]&#xD;
    private async Task&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt; Delete$Entity$([FromServices] IMediator mediator, Guid id, HttpContext context)&#xD;
        =&gt; await mediator.Send(new Delete$Entity$Request(id), context.RequestAborted);&#xD;
&#xD;
    [ProducesResponseType(200)]&#xD;
    [ProducesResponseType(401)]&#xD;
    [Authorize(AuthenticationSchemes = AuthData.AuthSchemes)]&#xD;
    [FeatureGroupName("$Entities$")]&#xD;
    private async Task&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt; Post$Entity$([FromServices] IMediator mediator, $Entity$CreateViewModel viewModel, HttpContext context)&#xD;
        =&gt; await mediator.Send(new Post$Entity$Request(viewModel), context.RequestAborted);&#xD;
&#xD;
    [ProducesResponseType(200)]&#xD;
    [ProducesResponseType(401)]&#xD;
    [Authorize(AuthenticationSchemes = AuthData.AuthSchemes)]&#xD;
    [FeatureGroupName("$Entities$")]&#xD;
    private async Task&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt; Put$Entity$([FromServices] IMediator mediator, Guid id, $Entity$UpdateViewModel viewModel, HttpContext context)&#xD;
        =&gt; await mediator.Send(new Put$Entity$Request(id, viewModel), context.RequestAborted);&#xD;
}&#xD;
&#xD;
public record Get$Entity$ByIdRequest(Guid Id) : IRequest&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt;;&#xD;
&#xD;
public class Get$Entity$ByIdRequestHandler : IRequestHandler&lt;Get$Entity$ByIdRequest, OperationResult&lt;$Entity$ViewModel&gt;&gt;&#xD;
{&#xD;
	private readonly IMapper _mapper;&#xD;
	private readonly IUnitOfWork _unitOfWork;&#xD;
&#xD;
	public Get$Entity$ByIdRequestHandler(IMapper mapper, IUnitOfWork unitOfWork)&#xD;
	{&#xD;
		_mapper = mapper;&#xD;
		_unitOfWork = unitOfWork;&#xD;
	}&#xD;
&#xD;
	public async Task&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt; Handle(Get$Entity$ByIdRequest request, CancellationToken cancellationToken)&#xD;
	{&#xD;
		var operation = OperationResult.CreateResult&lt;$Entity$ViewModel&gt;();&#xD;
		var entity = await _unitOfWork.GetRepository&lt;$Entity$&gt;().FindAsync(request.Id);&#xD;
&#xD;
		if (entity is null)&#xD;
		{&#xD;
			operation.AddError(new MicroserviceNotFoundException());&#xD;
			return operation;&#xD;
		}&#xD;
&#xD;
		var viewModel = _mapper.Map&lt;$Entity$ViewModel&gt;(entity);&#xD;
		operation.Result = viewModel;&#xD;
		return operation;&#xD;
	}&#xD;
}&#xD;
&#xD;
public record Get$Entity$PagedRequest(int PageIndex, int PageSize, string? Search) : IRequest&lt;OperationResult&lt;IPagedList&lt;$Entity$ViewModel&gt;&gt;&gt;;&#xD;
&#xD;
public class Get$Entity$PagedRequestHandler : IRequestHandler&lt;Get$Entity$PagedRequest, OperationResult&lt;IPagedList&lt;$Entity$ViewModel&gt;&gt;&gt;&#xD;
{&#xD;
	private readonly IMapper _mapper;&#xD;
	private readonly IUnitOfWork _unitOfWork;&#xD;
&#xD;
	public Get$Entity$PagedRequestHandler(IMapper mapper, IUnitOfWork unitOfWork)&#xD;
	{&#xD;
		_mapper = mapper;&#xD;
		_unitOfWork = unitOfWork;&#xD;
	}&#xD;
&#xD;
	public async Task&lt;OperationResult&lt;IPagedList&lt;$Entity$ViewModel&gt;&gt;&gt; Handle(Get$Entity$PagedRequest request, CancellationToken cancellationToken)&#xD;
	{&#xD;
		var operation = OperationResult.CreateResult&lt;IPagedList&lt;$Entity$ViewModel&gt;&gt;();&#xD;
		var predicate = GetPredicate(request.Search);&#xD;
		var pagedList = await _unitOfWork.GetRepository&lt;$Entity$&gt;()&#xD;
			.GetPagedListAsync(&#xD;
				predicate,&#xD;
				pageIndex: request.PageIndex,&#xD;
				pageSize: request.PageSize,&#xD;
				cancellationToken: cancellationToken);&#xD;
&#xD;
		if (pagedList.PageIndex &gt; pagedList.TotalPages)&#xD;
		{&#xD;
			pagedList = await _unitOfWork.GetRepository&lt;$Entity$&gt;()&#xD;
				.GetPagedListAsync(&#xD;
					pageIndex: 0,&#xD;
					pageSize: request.PageSize, &#xD;
					cancellationToken: cancellationToken);&#xD;
		}&#xD;
&#xD;
		operation.Result = _mapper.Map&lt;IPagedList&lt;$Entity$ViewModel&gt;&gt;(pagedList);&#xD;
		return operation;&#xD;
	}&#xD;
&#xD;
	private Expression&lt;Func&lt;$Entity$, bool&gt;&gt; GetPredicate(string? search)&#xD;
	{&#xD;
		var predicate = PredicateBuilder.True&lt;$Entity$&gt;();&#xD;
&#xD;
		if (search is null)&#xD;
		{&#xD;
			return predicate;&#xD;
		}&#xD;
&#xD;
		predicate.And(x =&gt; x.Name.Contains(search));&#xD;
&#xD;
		return predicate;&#xD;
	}&#xD;
}&#xD;
&#xD;
public record Delete$Entity$Request(Guid Id) : IRequest&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt;;&#xD;
&#xD;
public class Delete$Entity$RequestHandler : IRequestHandler&lt;Delete$Entity$Request, OperationResult&lt;$Entity$ViewModel&gt;&gt;&#xD;
{&#xD;
	private readonly IMapper _mapper;&#xD;
	private readonly IUnitOfWork _unitOfWork;&#xD;
&#xD;
	public Delete$Entity$RequestHandler(IMapper mapper, IUnitOfWork unitOfWork)&#xD;
	{&#xD;
		_mapper = mapper;&#xD;
		_unitOfWork = unitOfWork;&#xD;
	}&#xD;
&#xD;
	public async Task&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt; Handle(Delete$Entity$Request request, CancellationToken cancellationToken)&#xD;
	{&#xD;
		var operation = OperationResult.CreateResult&lt;$Entity$ViewModel&gt;();&#xD;
		var repository = _unitOfWork.GetRepository&lt;$Entity$&gt;();&#xD;
&#xD;
		var entity = await repository.FindAsync(request.Id);&#xD;
&#xD;
		if (entity == null)&#xD;
		{&#xD;
			operation.AddError(new MicroserviceNotFoundException());&#xD;
			return operation;&#xD;
		}&#xD;
&#xD;
		repository.Delete(entity);&#xD;
&#xD;
		await _unitOfWork.SaveChangesAsync();&#xD;
&#xD;
		if (!_unitOfWork.LastSaveChangesResult.IsOk)&#xD;
		{&#xD;
			operation.AddError(new MicroserviceSaveChangesException());&#xD;
			return operation;&#xD;
		}&#xD;
&#xD;
		operation.Result = _mapper.Map&lt;$Entity$ViewModel&gt;(entity);&#xD;
		return operation;&#xD;
	}&#xD;
}&#xD;
&#xD;
public record Post$Entity$Request($Entity$CreateViewModel ViewModel) : IRequest&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt;;&#xD;
&#xD;
public class Post$Entity$RequestHandler : IRequestHandler&lt;Post$Entity$Request, OperationResult&lt;$Entity$ViewModel&gt;&gt;&#xD;
{&#xD;
	private readonly IMapper _mapper;&#xD;
	private readonly IUnitOfWork _unitOfWork;&#xD;
&#xD;
	public Post$Entity$RequestHandler(IMapper mapper, IUnitOfWork unitOfWork)&#xD;
	{&#xD;
		_mapper = mapper;&#xD;
		_unitOfWork = unitOfWork;&#xD;
	}&#xD;
&#xD;
	public async Task&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt; Handle(Post$Entity$Request request, CancellationToken cancellationToken)&#xD;
	{&#xD;
		var operation = OperationResult.CreateResult&lt;$Entity$ViewModel&gt;();&#xD;
&#xD;
		var entity = _mapper.Map&lt;$Entity$&gt;(request.ViewModel);&#xD;
&#xD;
		await _unitOfWork.GetRepository&lt;$Entity$&gt;().InsertAsync(entity, cancellationToken);&#xD;
&#xD;
		await _unitOfWork.SaveChangesAsync();&#xD;
&#xD;
		if (!_unitOfWork.LastSaveChangesResult.IsOk)&#xD;
		{&#xD;
			operation.AddError(new MicroserviceSaveChangesException());&#xD;
			return operation;&#xD;
		}&#xD;
&#xD;
		operation.Result = _mapper.Map&lt;$Entity$ViewModel&gt;(entity);&#xD;
		return operation;&#xD;
	}&#xD;
}&#xD;
&#xD;
public record Put$Entity$Request(Guid Id, $Entity$UpdateViewModel ViewModel) : IRequest&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt;;&#xD;
&#xD;
public class Put$Entity$RequestHandler : IRequestHandler&lt;Put$Entity$Request, OperationResult&lt;$Entity$ViewModel&gt;&gt;&#xD;
{&#xD;
	private readonly IMapper _mapper;&#xD;
	private readonly IUnitOfWork _unitOfWork;&#xD;
&#xD;
	public Put$Entity$RequestHandler(IMapper mapper, IUnitOfWork unitOfWork)&#xD;
	{&#xD;
		_mapper = mapper;&#xD;
		_unitOfWork = unitOfWork;&#xD;
	}&#xD;
&#xD;
	public async Task&lt;OperationResult&lt;$Entity$ViewModel&gt;&gt; Handle(Put$Entity$Request request, CancellationToken cancellationToken)&#xD;
	{&#xD;
		var operation = OperationResult.CreateResult&lt;$Entity$ViewModel&gt;();&#xD;
&#xD;
		var repository = _unitOfWork.GetRepository&lt;$Entity$&gt;();&#xD;
		var entity = await repository.GetFirstOrDefaultAsync(predicate: x =&gt; x.Id == request.Id, disableTracking: false);&#xD;
&#xD;
		if (entity is null)&#xD;
		{&#xD;
			operation.AddError(new MicroserviceNotFoundException());&#xD;
			return operation;&#xD;
		}&#xD;
&#xD;
		_mapper.Map(request.ViewModel, entity);&#xD;
&#xD;
		repository.Update(entity);&#xD;
&#xD;
		await _unitOfWork.SaveChangesAsync();&#xD;
&#xD;
		if (!_unitOfWork.LastSaveChangesResult.IsOk)&#xD;
		{&#xD;
			operation.AddError(new MicroserviceSaveChangesException());&#xD;
			return operation;&#xD;
		}&#xD;
&#xD;
		operation.Result = _mapper.Map&lt;$Entity$ViewModel&gt;(entity);&#xD;
		return operation;&#xD;
	}&#xD;
}&#xD;
&#xD;
public class $Entity$MapperConfiguration : Profile&#xD;
{&#xD;
	public $Entity$MapperConfiguration()&#xD;
	{&#xD;
		CreateMap&lt;$Entity$CreateViewModel, $Entity$&gt;()&#xD;
			.ForAllMembers(x =&gt; x.Ignore());&#xD;
&#xD;
		CreateMap&lt;$Entity$, $Entity$ViewModel&gt;()&#xD;
			.ForAllMembers(x =&gt; x.Ignore());&#xD;
&#xD;
		CreateMap&lt;$Entity$, $Entity$UpdateViewModel&gt;()&#xD;
			.ForAllMembers(x =&gt; x.Ignore());&#xD;
&#xD;
		CreateMap&lt;$Entity$UpdateViewModel, $Entity$&gt;()&#xD;
			.ForAllMembers(x =&gt; x.Ignore());&#xD;
&#xD;
		CreateMap&lt;IPagedList&lt;$Entity$&gt;, IPagedList&lt;$Entity$ViewModel&gt;&gt;()&#xD;
			.ConvertUsing&lt;PagedListConverter&lt;$Entity$, $Entity$ViewModel&gt;&gt;();&#xD;
	}&#xD;
}&#xD;
&#xD;
public class $Entity$CreateViewModel : IViewModel&#xD;
{&#xD;
}&#xD;
&#xD;
public class $Entity$ViewModel : ViewModelBase&#xD;
{&#xD;
}&#xD;
&#xD;
public class $Entity$UpdateViewModel : ViewModelBase&#xD;
{&#xD;
}</s:String>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Reformat/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/ShortenQualifiedReferences/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Applicability/=Live/@EntryIndexedValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/@KeyIndexDefined">True</s:Boolean>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/Type/@EntryValue">InCSharpTypeMember</s:String>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Scope/=B68999B9D6B43E47A02B22C12A54C3CC/CustomProperties/=minimumLanguageVersion/@EntryIndexedValue">2.0</s:String>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Scope/=558F05AA0DE96347816FF785232CFB2A/@KeyIndexDefined">True</s:Boolean>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Scope/=558F05AA0DE96347816FF785232CFB2A/Type/@EntryValue">InCSharpTypeAndNamespace</s:String>
	<s:String x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Scope/=558F05AA0DE96347816FF785232CFB2A/CustomProperties/=minimumLanguageVersion/@EntryIndexedValue">2.0</s:String>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Field/=Entity/@KeyIndexDefined">True</s:Boolean>
	<s:Int64 x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Field/=Entity/Order/@EntryValue">0</s:Int64>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Field/=entities/@KeyIndexDefined">True</s:Boolean>
	<s:Int64 x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Field/=entities/Order/@EntryValue">1</s:Int64>
	<s:Boolean x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Field/=Entities/@KeyIndexDefined">True</s:Boolean>
	<s:Int64 x:Key="/Default/PatternsAndTemplates/LiveTemplates/Template/=E11D866B59DD9543A97D292A7BE573CD/Field/=Entities/Order/@EntryValue">2</s:Int64></wpf:ResourceDictionary>